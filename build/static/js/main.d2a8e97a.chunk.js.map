{"version":3,"sources":["services/persons.js","components/persons.js","components/filter.js","components/personform.js","components/notification.js","components/errornotification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Persons","searchName","deletePerson","persons","mapping","map","person","key","name","number","onClick","filter","toLocaleLowerCase","includes","Filter","value","handler","onChange","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Notification","message","className","ErrorNotification","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","setPersons","setNewName","setNewNumber","setSearchName","notification","setNotification","errorNotification","setErrorNotification","useEffect","personService","initialPersons","replaceNumber","personObject","window","confirm","find","returnedPerson","setTimeout","catch","error","console","log","submitPerson","concat","event","target","preventDefault","some","val","p","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2a8e97a.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","import React from 'react';\n\nconst Persons = ({searchName, deletePerson,persons}) => {\n  const mapping = (persons) => {\n    return (\n      persons.map(person => \n        <div key={person.name}>\n          {person.name} {person.number}\n          <button onClick={() => deletePerson(person)}> delete </button>\n        </div>\n      )\n    )\n  }\n\n  return (\n    searchName === '' \n      ? mapping(persons)\n      : mapping(persons.filter(person => \n        person.name.toLocaleLowerCase()\n        .includes(searchName.toLocaleLowerCase())))\n  )\n}\n\nexport default Persons","import React from 'react';\n\nconst Filter = ({value, handler}) => {\n  return (\n    <>\n      filter shown with \n        <input \n          value={value} \n          onChange={handler}\n        />\n    </>\n  )\n\n}\n\nexport default Filter","import React from 'react';\n\nconst PersonForm = ({addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\n    return (\n      <form onSubmit={addPerson}>\n      <div>\n        name: <input \n          value={newName} \n          onChange={handleNameChange}\n        /><br></br>\n        number: <input\n          value={newNumber}\n          onChange={handleNumberChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n    )\n}\n\nexport default PersonForm","import React from 'react';\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"newPerson\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react';\n\nconst ErrorNotification = ({ message }) => {\n    const notificationStyle = {\n        color: 'red',\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10,\n    }\n\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div style={notificationStyle}>\n            {message}\n        </div>\n    )\n}\n\nexport default ErrorNotification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Persons from './components/persons'\nimport Filter from './components/filter'\nimport PersonForm from './components/personform'\nimport Notification from './components/notification'\nimport ErrorNotification from './components/errornotification'\nimport './index.css'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchName, setSearchName ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ errorNotification, setErrorNotification] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n\n  const handleNameChange = (event) => {setNewName(event.target.value)}\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearch = (event) => {\n    setSearchName(event.target.value)\n  }\n\n  const handleAddPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.some(val => newName === val.name)) { \n      replaceNumber(personObject)\n    } else { \n      submitPerson(personObject)\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const replaceNumber = (personObject) => {\n    if(window.confirm(`${newName} is already added to phonebook, \n      replace the old number with a new one?`)) {\n      const id = persons.find(person => person.name === newName).id\n      personService.update(id, personObject)\n        .then(returnedPerson => {\n          setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n          setNotification(`Number of ${returnedPerson.name} is changed`)\n          setTimeout(() => {\n            setNotification(null)\n          }, 3000)\n        })\n        .catch(error => {\n          console.log(error.response.data)\n          setErrorNotification(error.response.data.error)\n          setTimeout(() => {\n            setErrorNotification(null)\n          }, 3000)\n        })\n    }\n  }\n\n  const submitPerson = (personObject) => {\n    personService\n      .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNotification(`Added ${returnedPerson.name}`)\n          setTimeout(() => {\n            setNotification(null)\n          }, 3000)\n        })\n      .catch(error => {\n        console.log(error.response.data)\n        setErrorNotification(error.response.data.error)\n        // setErrorNotification(`Adding ${personObject.name} failed`)\n        setTimeout(() => {\n          setErrorNotification(null)\n        }, 5000)\n      })\n  }\n\n  const handleDeletePerson = (person) => {\n    window.confirm(`Delete ${person.name}?`)\n      ? personService\n        .remove(person.id)\n        .then(() => {\n          setPersons(persons.filter(p => p.name !== person.name))\n        })\n        .catch(error => {\n          setErrorNotification(`Deleting ${person.name} failed`)\n          setTimeout(() => {\n            setErrorNotification(null)\n          }, 3000)\n        })\n      : console.log('not deleted due to cancelation')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <ErrorNotification message={errorNotification}/>\n\n      <Notification message={notification}/>\n      \n      <Filter value={searchName} handler={handleSearch}/>\n\n      <h3>add a new</h3>\n\n      <PersonForm addPerson={handleAddPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange}/>\n      \n      <h3>Numbers</h3>\n\n      <Persons searchName={searchName} deletePerson={handleDeletePerson} persons={persons}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport axios from 'axios';\n\n\naxios.get('/api/persons').then(response => {\n  const persons = response.data\n  ReactDOM.render(\n    <App persons={persons} />,\n    document.getElementById('root')\n  )\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}